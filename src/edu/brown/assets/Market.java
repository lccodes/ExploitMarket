package edu.brown.assets;

public class Market {
	public final Exploit EXPLOIT;
	private final float liquidityParameter;
	private long yes, no;
	
	public Market(Exploit exploit, long liquidityParameter) {
		this.EXPLOIT = exploit;
		this.liquidityParameter = liquidityParameter;
		this.yes = 0;
		this.no = 0;
	}
	
	public double probabilityYes() {
		return (Math.pow(Math.E, ((float) yes) / liquidityParameter) / denom());
	}
	
	public double probabilityNo() {
		return (Math.pow(Math.E, ((float) no) / liquidityParameter) / denom());
	}
	
	private double denom() {
		return ((Math.pow(Math.E, ((float) yes) / liquidityParameter) + 
				Math.pow(Math.E, ((float) no) / liquidityParameter)));
	}
	
	private double denom(boolean vote, int number) {
		if (vote) {
			return ((Math.pow(Math.E, ((float) yes + number) / liquidityParameter) + 
					Math.pow(Math.E, ((float) no) / liquidityParameter)));
		} else {
			return ((Math.pow(Math.E, ((float) yes) / liquidityParameter) + 
					Math.pow(Math.E, ((float) no + number) / liquidityParameter)));
		}
	} 
	
	public double cost(boolean vote, int number) {
		double oldCost = liquidityParameter * Math.log(denom());
		double newCost = liquidityParameter * Math.log(denom(vote, number));
		
		return newCost - oldCost;
	}
	
	

}
