package edu.brown.assets;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Exploit {
	public final String NAME;
	public final Long ID;
	public final Long FIRMAGENT;
	public final Danger DANGER;
	
	private static Map<Danger, List<String>> names;
	private static final Set<Long> used;
	private static final SecureRandom sr;
	static {
		names = new HashMap<Danger, List<String>>();
		used = new HashSet<Long>();
		sr = new SecureRandom();
		List<String> choices = new ArrayList<String>();
		choices.add("Buffer Overflow");
		choices.add("SQL Injection");
		choices.add("Code Injection");
		choices.add("Remote Access Tool");
		choices.add("Cross Site Scripting");
		choices.add("Race Condition");
		choices.add("Privilege Escalation");
		choices.add("Social Engineering");
		choices.add("Hash Collision");
		choices.add("Forged Certificate");
		choices.add("Man in the Middle");
		choices.add("Rootkit");
		choices.add("Botnet");
		choices.add("Zero Day");
		choices.add("Information Leak");
		choices.add("Cache Poisioning");
		choices.add("Sidechannel Attack");
		choices.add("Backdoor");
		choices.add("Encryption Backdoor");
		
		for (Danger d : Danger.getLevels()) {
			List<String> n = new ArrayList<String>();
			int next = sr.nextInt() % choices.size();
			n.add(choices.get(next));
			choices.remove(next);
			names.put(d, n);
		}
	}
	
	private Exploit(String name, long ID, Danger danger, long firmagent) {
		this.NAME = name;
		this.ID = ID;
		this.DANGER = danger;
		this.FIRMAGENT = firmagent;
	}
	
	/*
	 * Creates an exploit for the assigned firm agent
	 * @param firmagent : chosen from the game by World
	 */
	public static Exploit generate(long firmagent) {
		long tag = Long.MAX_VALUE;
		do {
			tag = sr.nextLong();
		} while (used.contains(tag));
		used.add(tag);
		
		double chance = sr.nextDouble();
		Danger danger = Danger.SIX;
		if (chance <= .5) {
			danger = Danger.FIVE;
		} else if (chance <= .15) {
			danger = Danger.FOUR;
		} else if (chance <= .35) {
			danger = Danger.THREE;
		} else if (chance <= .65) {
			danger = Danger.TWO;
		} else if (chance <= .99) {
			danger = Danger.ONE;
		}
		
		return new Exploit(names.get(danger).get((int) (names.get(danger).size() * sr.nextDouble())),
				tag,
				danger,
				firmagent);
	}
	
	@Override
	public boolean equals(Object o) {
		if (o instanceof Exploit) {
			Exploit e = (Exploit) o;
			return e.DANGER.equals(this.DANGER) && e.FIRMAGENT.equals(this.FIRMAGENT)
					&& e.ID.equals(this.ID) && this.DANGER.equals(e.DANGER);
		}
		
		return false;
	}
}
