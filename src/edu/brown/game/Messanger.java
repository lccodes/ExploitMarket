package edu.brown.game;

import java.util.concurrent.Future;

import edu.brown.agent.Agent;
import edu.brown.agent.FirmAgent;
import edu.brown.agent.HackerAgent;
import edu.brown.agent.InvestorAgent;
import edu.brown.agent.VerifierAgent;
import edu.brown.assets.Exploit;
import edu.brown.signals.Offer;

public class Messanger {
	private final World world;
	
	public Messanger(World w) {
		this.world = w;
	}
	
	public boolean makeOffer(FirmAgent self, long to, Offer offer) {
		return offer(self, to, offer);
	}
	
	public boolean makeOffer(HackerAgent self, long to, Offer offer) {
		return offer(self, to, offer);
	}

	public boolean makeOffer(InvestorAgent self, long to, Offer offer) {
		return offer(self, to, offer);
	}
	
	private boolean offer(Agent self, long to, Offer offer) {
		if (world.contains(to)) {
			Long from = world.getID(self);
			if (from == null) {
				return false;
			}
			return world.giveOffer(from, to, offer);
		} else {
			return false;
		}
	}
	
	public boolean acceptOffer(FirmAgent self, Offer offer) {
		return accept(self, offer);
	}
	
	public boolean acceptOffer(HackerAgent self, Offer offer) {
		return accept(self, offer);
	}

	public boolean acceptOffer(InvestorAgent self, Offer offer) {
		return accept(self, offer);
	}
	
	public Future<Exploit> acceptOffer(VerifierAgent self, Offer offer) {
		if (world.getID(self) != null) {
			return world.requestVerify(offer);
		}
		
		return null;
	}
	
	private boolean accept(Agent self, Offer offer) {
		if (world.contains(offer.TO)) {
			Long from = world.getID(self);
			if (from == null) {
				return false;
			}
			return world.acceptOffer(from, offer);
		} else {
			return false;
		}
	}
	
	public void expose(Exploit e) {
		world.expose(e);
	}

}
